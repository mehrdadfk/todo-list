/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mehrdad.todolist.api;

import com.mehrdad.todolist.model.ErrorResponseDTO;
import com.mehrdad.todolist.model.NewTodoItemDTO;
import com.mehrdad.todolist.model.TodoItemDTO;
import com.mehrdad.todolist.model.UpdateTodoItemDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-29T17:31:52.843841+02:00[Europe/Berlin]")
@Validated
@Tag(name = "todos", description = "the todos API")
public interface TodosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /todos : Add a new todo item
     *
     * @param newTodoItemDTO  (required)
     * @return Todo item created (status code 201)
     */
    @Operation(
        operationId = "createTodo",
        summary = "Add a new todo item",
        responses = {
            @ApiResponse(responseCode = "201", description = "Todo item created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodoItemDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/todos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TodoItemDTO> createTodo(
        @Parameter(name = "NewTodoItemDTO", description = "", required = true) @Valid @RequestBody NewTodoItemDTO newTodoItemDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"completedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"id\", \"status\" : \"not done\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos : Get all todo items
     *
     * @param onlyNotDone Option to retrieve all items or only not done ones (optional, default to true)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getAll",
        summary = "Get all todo items",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TodoItemDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TodoItemDTO>> getAll(
        @Parameter(name = "only_not_done", description = "Option to retrieve all items or only not done ones", in = ParameterIn.QUERY) @Valid @RequestParam(value = "only_not_done", required = false, defaultValue = "true") Boolean onlyNotDone
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"completedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"id\", \"status\" : \"not done\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"completedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"id\", \"status\" : \"not done\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos/{id} : Get details of a specific todo item
     *
     * @param id  (required)
     * @return Successful response (status code 200)
     *         or entity by id not found (status code 404)
     */
    @Operation(
        operationId = "getTodoById",
        summary = "Get details of a specific todo item",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodoItemDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "entity by id not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TodoItemDTO> getTodoById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"completedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"id\", \"status\" : \"not done\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /todos/{id}/done : Mark a todo item as done
     *
     * @param id  (required)
     * @return Todo item marked as done (status code 200)
     */
    @Operation(
        operationId = "markTodoAsDone",
        summary = "Mark a todo item as done",
        responses = {
            @ApiResponse(responseCode = "200", description = "Todo item marked as done", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodoItemDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/todos/{id}/done",
        produces = { "application/json" }
    )
    default ResponseEntity<TodoItemDTO> markTodoAsDone(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"completedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"id\", \"status\" : \"not done\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /todos/{id}/not-done : Mark a todo item as not done
     *
     * @param id  (required)
     * @return Todo item marked as not done (status code 200)
     */
    @Operation(
        operationId = "markTodoAsNotDone",
        summary = "Mark a todo item as not done",
        responses = {
            @ApiResponse(responseCode = "200", description = "Todo item marked as not done", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodoItemDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/todos/{id}/not-done",
        produces = { "application/json" }
    )
    default ResponseEntity<TodoItemDTO> markTodoAsNotDone(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"completedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"id\", \"status\" : \"not done\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /todos/{id} : Update description of a todo item
     *
     * @param id  (required)
     * @param updateTodoItemDTO  (required)
     * @return Todo item updated (status code 200)
     */
    @Operation(
        operationId = "updateTodoDescription",
        summary = "Update description of a todo item",
        responses = {
            @ApiResponse(responseCode = "200", description = "Todo item updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodoItemDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/todos/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TodoItemDTO> updateTodoDescription(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UpdateTodoItemDTO", description = "", required = true) @Valid @RequestBody UpdateTodoItemDTO updateTodoItemDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"completedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"id\", \"status\" : \"not done\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
